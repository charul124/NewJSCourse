IS everything an object?

- okay so when we are checking the typeof different data types we get those primitive dt
console.log("5 is : " + typeof 5);
console.log("Hello is : " + typeof "Hello");
console.log("True is : " + typeof true);
console.log("undefined is : " + typeof undefined);
console.log("null is : " + typeof null);

- but when we check for array, object, function we get object

var a = [];
var b = {};
var c = function(){};
console.log("array is : " + typeof a);
console.log("object is : " + typeof b);

- functions are special kind of objects "callable objects" can be invoked or passed 
console.log("function is : " + typeof c);
console.log(c instanceof Object);

- so here we can see the concept of loose equality and strict equality 
- loose equality checks only the value and not the type and hence here the values gets coerced
- strict equality checks both the value and the type

console.log(null == undefined);
console.log(null === undefined);


okay so everything in JS behaves like an object because 

- primitive data types will be wrapped in their object wrapper for fraction of time 
- technically this is called auto-boxing -> helps to give some functionality to primitive data types

- so why do we need objects?
- JS uses objects everywhere because we can store and manipulate data in objects
    - Dynamic Properties : we can add and remove properties from objects at runtime
    - prototypal inheritance : we can inherit properties and methods from other objects
    - Encapsulation : we can hide the properties and methods, data and behavior from the outside world


Asynchronous JS

- JS is a single threaded -> one command runs at a time
         Synchronous    -> each line will run in order the code appears
- promises -> significant ES6 feature
- promises are used to handle asynchronous operations in JavaScript
- Asynchronicity -> feature that makes dynamic websites possible

function sayhello(){
    console.log("Hello");
}
function blockforsec(){
    console.log("Blocking");
}
setTimeout(sayhello, 1000);
setTimeout(sayhello, 1000); 

- when after 0ms also it prints hello after "Mefirst" 
- it is because of queue of the callback function "Callback queue"

blockforsec();
console.log("Me First");
setTimeout(blockforsec, 1000);
console.log("Me Second");

- so JS typically has a single execution, memory environment and a single call stack
- there are new components Promises, Event Loops, and web APIs that are not part of JS engine but are part of browser

- so Web Browser is JS + browser features and 
- actually JS to interact with the browser uses different browser features like DOM(document), Timer(SetTimeout), Requests(Fetch) etc
- callback hell -> when we have multiple nested callbacks

- promises -> significant ES6 feature
- promises objects are used to handle asynchronous operations in JavaScript

console.log("-----------------Promises-----------------");
function display(data){
    console.log(data);
}
const anotherdata = fetch('https://api.github.com/users/charulagrl');
anotherdata.then(display);
console.log("Me First");

- how it goes is like first the display function is declared in the memory
- then the fetch function is called and the promise object(here anotherdata) is created
- with the two labels -> value(for whatever response we get from the fetch)
- and unfulfilled array(for what instructions we want to perform in the future)
- and then the promise object executes with display function in the call stack and then the response is displayed

function displaydata(data){    // first declared in memory
    console.log(data);
}
function printhello(){       // second declared in memory
    console.log("Hello");
}
setTimeout(printhello,0);     //starts executing and send to browser with the timer
const futuredata = fetch('https://api.github.com/users/charul124');    // futuredata : third declared in the memory
futuredata.then(displaydata);
console.log("Me First");

- all these enables :
    - Non-blocking applications 
    - Web browser can do other things while waiting for the response

